genrule(
    name = "export",
    srcs = [],
    outs = ["src/cmark-gfm_export.h"],
    cmd = """cat > $@ <<EOF
#ifndef CMARK_GFM_EXPORT_H
#define CMARK_GFM_EXPORT_H

#ifdef CMARK_GFM_STATIC_DEFINE
#  define CMARK_GFM_EXPORT
#  define CMARK_GFM_NO_EXPORT
#else
#  ifndef CMARK_GFM_EXPORT
#    ifdef libcmark_gfm_EXPORTS
        /* We are building this library */
#      define CMARK_GFM_EXPORT __attribute__((visibility("default")))
#    else
        /* We are using this library */
#      define CMARK_GFM_EXPORT __attribute__((visibility("default")))
#    endif
#  endif

#  ifndef CMARK_GFM_NO_EXPORT
#    define CMARK_GFM_NO_EXPORT __attribute__((visibility("hidden")))
#  endif
#endif

#ifndef CMARK_GFM_DEPRECATED
#  define CMARK_GFM_DEPRECATED __attribute__ ((__deprecated__))
#endif

#ifndef CMARK_GFM_DEPRECATED_EXPORT
#  define CMARK_GFM_DEPRECATED_EXPORT CMARK_GFM_EXPORT CMARK_GFM_DEPRECATED
#endif

#ifndef CMARK_GFM_DEPRECATED_NO_EXPORT
#  define CMARK_GFM_DEPRECATED_NO_EXPORT CMARK_GFM_NO_EXPORT CMARK_GFM_DEPRECATED
#endif

#if 0 /* DEFINE_NO_DEPRECATED */
#  ifndef CMARK_GFM_NO_DEPRECATED
#    define CMARK_GFM_NO_DEPRECATED
#  endif
#endif

#endif /* CMARK_GFM_EXPORT_H */
EOF""",
)

genrule(
    name = "version",
    srcs = [],
    outs = ["src/cmark-gfm_version.h"],
    cmd = """cat > $@ <<EOF
#ifndef CMARK_GFM_VERSION_H
#define CMARK_GFM_VERSION_H

#define CMARK_GFM_VERSION ((0 << 24) | (28 << 16) | (3 << 8) | 19)
#define CMARK_GFM_VERSION_STRING "0.28.3.gfm.19"

#endif
EOF""",
)

genrule(
    name = "config",
    srcs = [],
    outs = ["src/config.h"],
    cmd = """cat > $@ <<EOF
#ifndef CMARK_CONFIG_H
#define CMARK_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

#define HAVE_STDBOOL_H

#ifdef HAVE_STDBOOL_H
  #include <stdbool.h>
#elif !defined(__cplusplus)
  typedef char bool;
#endif

#define HAVE___BUILTIN_EXPECT

#define HAVE___ATTRIBUTE__

#ifdef HAVE___ATTRIBUTE__
  #define CMARK_ATTRIBUTE(list) __attribute__ (list)
#else
  #define CMARK_ATTRIBUTE(list)
#endif

#ifndef CMARK_INLINE
  #if defined(_MSC_VER) && !defined(__cplusplus)
    #define CMARK_INLINE __inline
  #else
    #define CMARK_INLINE inline
  #endif
#endif

/* snprintf and vsnprintf fallbacks for MSVC before 2015,
   due to Valentin Milea http://stackoverflow.com/questions/2915672/
*/

#if defined(_MSC_VER) && _MSC_VER < 1900

#include <stdio.h>
#include <stdarg.h>

#define snprintf c99_snprintf
#define vsnprintf c99_vsnprintf

CMARK_INLINE int c99_vsnprintf(char *outBuf, size_t size, const char *format, va_list ap)
{
    int count = -1;

    if (size != 0)
        count = _vsnprintf_s(outBuf, size, _TRUNCATE, format, ap);
    if (count == -1)
        count = _vscprintf(format, ap);

    return count;
}

CMARK_INLINE int c99_snprintf(char *outBuf, size_t size, const char *format, ...)
{
    int count;
    va_list ap;

    va_start(ap, format);
    count = c99_vsnprintf(outBuf, size, format, ap);
    va_end(ap);

    return count;
}

#endif

#ifdef __cplusplus
}
#endif

#endif
EOF""",
)

genrule(
    name = "extensions_export",
    srcs = [],
    outs = ["extensions/cmark-gfm-extensions_export.h"],
    cmd = """cat > $@ <<EOF
#ifndef CMARK_GFM_EXTENSIONS_EXPORT_H
#define CMARK_GFM_EXTENSIONS_EXPORT_H

#ifdef CMARK_GFM_EXTENSIONS_STATIC_DEFINE
#  define CMARK_GFM_EXTENSIONS_EXPORT
#  define CMARK_GFM_EXTENSIONS_NO_EXPORT
#else
#  ifndef CMARK_GFM_EXTENSIONS_EXPORT
#    ifdef libcmark_gfm_extensions_EXPORTS
        /* We are building this library */
#      define CMARK_GFM_EXTENSIONS_EXPORT __attribute__((visibility("default")))
#    else
        /* We are using this library */
#      define CMARK_GFM_EXTENSIONS_EXPORT __attribute__((visibility("default")))
#    endif
#  endif

#  ifndef CMARK_GFM_EXTENSIONS_NO_EXPORT
#    define CMARK_GFM_EXTENSIONS_NO_EXPORT __attribute__((visibility("hidden")))
#  endif
#endif

#ifndef CMARK_GFM_EXTENSIONS_DEPRECATED
#  define CMARK_GFM_EXTENSIONS_DEPRECATED __attribute__ ((__deprecated__))
#endif

#ifndef CMARK_GFM_EXTENSIONS_DEPRECATED_EXPORT
#  define CMARK_GFM_EXTENSIONS_DEPRECATED_EXPORT CMARK_GFM_EXTENSIONS_EXPORT CMARK_GFM_EXTENSIONS_DEPRECATED
#endif

#ifndef CMARK_GFM_EXTENSIONS_DEPRECATED_NO_EXPORT
#  define CMARK_GFM_EXTENSIONS_DEPRECATED_NO_EXPORT CMARK_GFM_EXTENSIONS_NO_EXPORT CMARK_GFM_EXTENSIONS_DEPRECATED
#endif

#if 0 /* DEFINE_NO_DEPRECATED */
#  ifndef CMARK_GFM_EXTENSIONS_NO_DEPRECATED
#    define CMARK_GFM_EXTENSIONS_NO_DEPRECATED
#  endif
#endif

#endif /* CMARK_GFM_EXTENSIONS_EXPORT_H */
EOF""",
)

cc_library(
    name = "cmark_static",
    srcs = glob(
        [
            "src/*.c",
            "src/*.inc",
        ],
        exclude = ["src/main.c"],
    ),
    hdrs = glob(["src/*.h"]) + [
        "src/cmark-gfm_export.h",
        "src/cmark-gfm_version.h",
        "src/config.h",
    ],
    includes = ["src"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "cmark_extensions",
    srcs = glob(["extensions/*.c"]),
    hdrs = glob(["extensions/*.h"]) + ["extensions/cmark-gfm-extensions_export.h"],
    includes = ["extensions"],
    visibility = ["//visibility:public"],
    deps = [":cmark_static"],
)
